{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pokedexter","text":"<p>Who's that Pok\u00e9mon?</p> <p>Ever wondered if your cat could be a Pok\u00e9mon? Curious about what\u2019s hiding in your cupboard? Pokedexter is an AI-powered Pok\u00e9dex that helps you discover Pok\u00e9mon wherever you are. Just snap a photo, and Pokedexter will identify the Pok\u00e9mon\u2014maybe even ones you never expected!</p> <p>Open Pokedexter on your phone and start discovering Pok\u00e9mon all around you!</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Identify Pok\u00e9mon anywhere using AI image recognition and description generation.</li> <li>Build your personal Pok\u00e9mon collection\u2014your progress is saved locally.</li> <li>Use Pokedexter on any device that supports a modern web browser.</li> <li>Designed for mobile use with a responsive layout.</li> <li>Installable as a Progressive Web App (PWA).</li> <li>Powered by a technology stack that\u2019s 99% Python.</li> </ul>"},{"location":"#fit-with-the-theme","title":"Fit with the theme","text":"<p>The theme for this year's code jam is to write a browser-based Python application that is the wrong tool for the job.</p> <p>Pokedexter is an intentionally out of place tool for Pok\u00e9mon identification. It neither identifies real-world objects nor actual Pok\u00e9mon. Instead, it invites users to view their everyday surroundings through a playful, imaginative Pok\u00e9mon perspective.</p> <p>Most modern web apps are built with JavaScript frameworks like React or Angular. With Pokedexter, we set out to see how closely we could replicate a typical web app experience using Python instead of JavaScript. Our goal was to apply common web development architecture and design patterns, while also taking advantage of Python\u2019s strengths in data processing and machine learning.</p>"},{"location":"#about-the-team","title":"About the team","text":"<p>This project has been built by the Calm Calatheas team for the Python Discord Code Jam 2025. Please feel free to reach out if you have any questions, or need a hand with anything!</p> Name Contributions TFBlunt Team Lead, Frontend, Description Generation, Docs leoluy Description Generation, Model Selection, Frontend Mockup, Ideation Zike01 Ideation Flonc Initial Frontend Prototype esmaycat Object Detection, Transformers.js integration, Favourites Feature"},{"location":"setup-guide/","title":"Setup Guide","text":"<p>This guide provides a step-by-step approach on how to run Pokedexter.</p>"},{"location":"setup-guide/#set-up-the-development-environment","title":"Set up the development environment","text":"<p>Follow the instructions in the development environment setup guide to set up your local environment.</p>"},{"location":"setup-guide/#run-the-app-locally","title":"Run the app locally","text":"<p>The easiest way to run Pokedexter locally is to use the included <code>taskipy</code> configuration. Run the following command:</p> <pre><code>uv run task serve\n</code></pre> <p>This runs a development server that you can use to access the app from your local machine. This is great for trying out the app yourself on the device where you are running the server.</p> <p>Keep reading if you'd like to deploy Pokedexter for production use, or if you'd like to access the app from another device like a mobile phone or tablet.</p>"},{"location":"setup-guide/#local-https-for-mobile-testing","title":"Local HTTPS for Mobile Testing","text":"<p>You may just want to test the application on a mobile device without setting up a full reverse proxy. Here's how to create a simple, self-signed HTTPS server for local testing.</p> <p>First, you'll need to create your own SSL/TLS certificate. This certificate will be used to encrypt the connection between your computer and the mobile device. To generate it, run the following command in the project's root directory:</p> <pre><code>openssl req -x509 -keyout key.pem -out cert.pem -nodes\n</code></pre> <p>The command will prompt you for some information. When asked for the \"Common Name\", enter your computer's local IP address. For all other prompts, press Enter to accept the default values. This process will generate two files in your project's root directory: <code>key.pem</code> (your private key) and <code>cert.pem</code> (your self-signed certificate).</p> <p>You can now start the server with the following command:</p> <pre><code>uv run uvicorn calm_calatheas.app:app \\\n  --host \"0.0.0.0\" \\\n  --port 4443 \\\n  --ssl-keyfile key.pem \\\n  --ssl-certfile cert.pem\n</code></pre> <p>Because the certificate is self-signed (i.e. not issued by a trusted authority), your browser will likely display a \"certificate not trusted\" warning. This is expected. You can safely bypass this warning to continue to your application.</p>"},{"location":"setup-guide/#build-the-docker-image","title":"Build the Docker image","text":"<p>The easiest way to deploy Pokedexter is to use Docker. To deploy Pokedexter, you must first build the Docker image.</p> <p>Prerequisite</p> <p>Make sure you have Docker installed before proceeding.</p> <p>The project has a <code>taskipy</code> configuration that makes it easy to build the Docker image. Run the following command:</p> <pre><code>uv run task build-docker\n</code></pre> <p>This first builds a <code>.whl</code> file for the project, and then uses that file to build the Docker image based on the included <code>Dockerfile</code>. The docker image will be called <code>calm-calatheas:latest</code>.</p>"},{"location":"setup-guide/#set-the-environment-variables","title":"Set the environment variables","text":"<p>Pokedexter can be configured using environment variables. The following configuration options are available:</p> Environment Variable Description Default <code>HOST</code> The address to bind the server to. <code>0.0.0.0</code> <code>LOG_LEVEL</code> The logging level for the application. <code>DEBUG</code> <code>PORT</code> The port to run the server on. <code>8000</code> <code>STATIC_FILES_PATH</code> The path to the static files directory. <code>app</code> <p>All settings are optional</p> <p>You can run the app using the default settings without specifying any environment variables.</p> <p>See the <code>Settings</code> documentation for more information.</p>"},{"location":"setup-guide/#run-the-docker-container","title":"Run the Docker container","text":"<p>Once the image is built, you can deploy the app to an environment of your choice.</p> <p>Minimum system specs</p> <p>For a minimal deployment, we recommend 2 CPU cores and 8GB of RAM. We also recommend a GPU with at least 4GB of VRAM and CUDA 6.5 support or higher.</p> <p>If you are deploying Pokedexter to the cloud, refer to your cloud provider's documentation on how to deploy a Docker container.</p> <p>If you are hosting Pokedexter yourself, you can run the Docker container with the following command:</p> <pre><code>docker run -p 8000:8000 calm-calatheas:latest\n</code></pre> <p>This runs the container and maps the default port <code>8000</code> to the host machine, allowing you to access the app at <code>http://localhost:8000</code>.</p> <p>Secure browser context required</p> <p>Both the camera and PWA features require a secure browser context, which is only available when the app is served over HTTPS or on <code>localhost</code>.</p> <p>Keep reading if your deployment will be accessed outside of <code>localhost</code>.</p>"},{"location":"setup-guide/#set-up-a-reverse-proxy","title":"Set up a reverse proxy","text":"<p>We recommend deploying Pokedexter behind a reverse proxy acting as a TLS termination proxy.</p> <p>Prerequisite</p> <p>Make sure you have a registered domain name and that you have access to the DNS settings for that domain.</p> <p>If you are deploying Pokedexter to the cloud, we recommend that you use your cloud provider's gateway solution to set up HTTPS for the app.</p> <p>If you are hosting Pokedexter yourself, here's a sample <code>docker-compose.yaml</code> file using Caddy:</p> <pre><code>name: pokedexter\n\nservices:\n    reverse-proxy:\n        image: caddy:latest\n        command: caddy reverse-proxy --from &lt;your-domain&gt;:8000 --to app:8000\n        depends_on:\n            app:\n                condition: service_healthy\n        ports:\n            - 8000:8000\n\n    app:\n        image: calm-calatheas:latest\n        ports:\n            - 8000\n</code></pre> <p>This configuration sets up Caddy as a reverse proxy for your app, allowing you to access it securely over HTTPS. Caddy will automatically obtain and renew SSL certificates for your domain using Let's Encrypt.</p>"},{"location":"setup-guide/#set-up-dns","title":"Set up DNS","text":"<p>Finally, set up a DNS record for your domain that points to the server where the reverse proxy is running:</p> <pre><code>Type: A\nHost: &lt;your-domain&gt;\nValue: &lt;your-server-ip-address&gt;\nTTL: 3600\n</code></pre> <p>Replace <code>&lt;your-server-ip-address&gt;</code> with the public IP address of the machine running your reverse proxy. This will direct traffic for <code>&lt;your-domain&gt;</code> to your server.</p> <p>Deployment complete</p> <p>You can now access the app from any device at <code>https://&lt;your-domain&gt;:8000</code>!</p>"},{"location":"user-guide/","title":"User Guide","text":"<p>Welcome to the user guide for Pokedexter! This guide will help you get started building your Pok\u00e9mon collection.</p> <p>Open Pokedexter in your favorite web browser to get started!</p> <p>Use Pokedexter on your phone</p> <p>Open Pokedexter on your phone to identify Pok\u00e9mon wherever you are!</p>"},{"location":"user-guide/#home-page","title":"Home Page","text":"<p>The home page is the main screen of the app. Let's go through its step by step:</p> <p>At the top of the page is a welcome message and some instructions on how to get started. Below that is your Pok\u00e9mon collection, which is empty for now.</p> <p>The app is telling us to take a picture or upload an image to discover the Pok\u00e9mon inside. Let's do that now!</p>"},{"location":"user-guide/#taking-a-picture","title":"Taking a Picture","text":"<p>To start taking a picture, click the camera icon at the bottom of the screen. This will pop up the camera interface, allowing you to take a picture of the object you would like to identify.</p> <p>While loading, you can see the camera interface preparing to take a picture. You may at this point be prompted to allow camera access if you haven't already done so.</p> <p>Grant Camera Access</p> <p>You will not be able to use the camera feature until you grant access. If you deny access by mistake, you can refresh the page to be prompted again, or enable it again in your device settings.</p> <p>Once ready, the camera image will appear on the screen. You can now take a picture by clicking the capture button. This will process the image and attempt to identify the Pok\u00e9mon within it.</p> <p>Switching Cameras</p> <p>If your device has more than one camera (such as front and back cameras), you can switch between them by clicking the switch camera button in the camera interface, located next to the capture button.</p>"},{"location":"user-guide/#uploading-an-image","title":"Uploading an Image","text":"<p>If you prefer to upload an image instead of using the camera, you can do so by clicking the upload button at the bottom of the screen. This will open a file dialog, allowing you to select an image file from your device.</p> <p>Access your Camera App</p> <p>If you prefer to use your phone's camera app, it will also be available as an option in the upload dialog.</p> <p>Once you have selected an image, the app will process it and attempt to identify the Pok\u00e9mon within it.</p>"},{"location":"user-guide/#analyzing-the-image","title":"Analyzing the Image","text":"<p>Now, the app will analyze the image and try to detect any Pok\u00e9mon present. This may take a few moments, so please be patient. While you wait, you can try to guess which Pok\u00e9mon it might come up with!</p> <p>Once the image has been processed, the app will display the results, showing the identified Pok\u00e9mon along with their details.</p>"},{"location":"user-guide/#building-your-collection","title":"Building your Collection","text":"<p>Congratulations on capturing your first Pok\u00e9mon! You can now view it in your collection and continue to add more Pok\u00e9mon as you discover them.</p> <p>Saving Your Collection</p> <p>Your collection is automatically saved on your device so you don't lose your progress.</p> <p>Here's what it looks like when there's a few more Pok\u00e9mon in your collection:</p>"},{"location":"user-guide/#managing-your-collection","title":"Managing your Collection","text":"<p>Once you've started building your collection, you may want to show your love for a specific Pok\u00e9mon. You can mark it as a favorite by clicking the favourite button in the Pok\u00e9mon details view. A heart icon will appear next to the Pok\u00e9mon's name!</p> <p>If you ever change your mind, you can also unfavourite a Pok\u00e9mon by clicking the unfavourite button. If you'd like to remove a Pok\u00e9mon from your collection entirely, you can do so by clicking the delete button at the bottom of the details view.</p>"},{"location":"user-guide/#switching-the-theme","title":"Switching the Theme","text":"<p>By default, the app will use your system's theme preference (light or dark). However, you can change the theme manually by clicking the theme buttons in the app settings.</p> <p>You can switch back to your system default by selecting auto.</p> <p>Happy exploring!</p>"},{"location":"code/","title":"Code","text":"<p>This section provides automatically generated documentation for the codebase, including an overview of the project's modules, classes, and functions.</p> <p>It is intended for developers who want to understand or contribute to the project, as well as for code jam judges reviewing the implementation.</p>"},{"location":"code/backend/","title":"Backend","text":"<p>Below is a high-level overview of the backend architecture:</p> <p></p> <p>This diagram was generated automatically using <code>pydeps</code>. The detailed documentation below was generated with <code>mkdocstrings</code>.</p>"},{"location":"code/backend/#calm_calatheas.app","title":"calm_calatheas.app","text":""},{"location":"code/backend/#calm_calatheas.app.app","title":"app  <code>module-attribute</code>","text":"<pre><code>app = Starlette(routes=routes)\n</code></pre>"},{"location":"code/backend/#calm_calatheas.app.routes","title":"routes  <code>module-attribute</code>","text":"<pre><code>routes = [\n    Route(\"/describe\", endpoint=describe, methods=[\"GET\"]),\n    Route(\n        \"/healthcheck\",\n        endpoint=healthcheck,\n        methods=[\"GET\"],\n    ),\n    Mount(\n        \"/\",\n        app=StaticFiles(\n            directory=static_files_path, html=True\n        ),\n        name=\"static\",\n    ),\n]\n</code></pre>"},{"location":"code/backend/#calm_calatheas.app.describe","title":"describe  <code>async</code>","text":"<pre><code>describe(request: Request) -&gt; Response\n</code></pre> <p>Handle GET requests to the /describe endpoint.</p>"},{"location":"code/backend/#calm_calatheas.app.healthcheck","title":"healthcheck  <code>async</code>","text":"<pre><code>healthcheck(_: Request) -&gt; Response\n</code></pre> <p>Handle GET requests to the /healthcheck endpoint.</p>"},{"location":"code/backend/#calm_calatheas.logger","title":"calm_calatheas.logger","text":""},{"location":"code/backend/#calm_calatheas.logger.LOGGER","title":"LOGGER  <code>module-attribute</code>","text":"<pre><code>LOGGER = getLogger('calm_calatheas')\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model","title":"calm_calatheas.model","text":""},{"location":"code/backend/#calm_calatheas.model.DESCRIPTION_PROMPT","title":"DESCRIPTION_PROMPT  <code>module-attribute</code>","text":"<pre><code>DESCRIPTION_PROMPT = f'\nYou are a helpful Pokemon professor.\nThe user is a Pokemon trainer seeking information.\nThe user will prompt you with a caption for a picture of a Pokemon.\nAnswer using the following schema: {dumps(model_json_schema())}\n'\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model.MODEL","title":"MODEL  <code>module-attribute</code>","text":"<pre><code>MODEL = from_pretrained(\n    MODEL_NAME, torch_dtype=\"auto\", device_map=\"auto\"\n)\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model.MODEL_NAME","title":"MODEL_NAME  <code>module-attribute</code>","text":"<pre><code>MODEL_NAME = 'Qwen/Qwen3-1.7B'\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model.REPAIR_PROMPT","title":"REPAIR_PROMPT  <code>module-attribute</code>","text":"<pre><code>REPAIR_PROMPT = f'\nYou are a helpful Pokemon professor.\nThe input is a Pokemon description and a validation error.\nThe description needs to be repaired based on the error.\nLeave fields not mentioned in the error unchanged.\nAnswer using the following schema: {dumps(model_json_schema())}\n'\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model.TOKENIZER","title":"TOKENIZER  <code>module-attribute</code>","text":"<pre><code>TOKENIZER = from_pretrained(MODEL_NAME)\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model.PokemonDescription","title":"PokemonDescription","text":"<p>               Bases: <code>BaseModel</code></p> <p>A description of a Pokemon.</p>"},{"location":"code/backend/#calm_calatheas.model.PokemonDescription.ability","title":"ability  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ability: str = Field(\n    description=\"The primary ability of the Pokemon, which can affect its performance in battles.\"\n)\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model.PokemonDescription.category","title":"category  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>category: str = Field(\n    description=\"The category of the Pokemon, phrased as a noun.\"\n)\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model.PokemonDescription.flavor_text","title":"flavor_text  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>flavor_text: str = Field(\n    description=\"Flavor text to add characterization or lore to the Pokemon in question.\",\n    max_length=255,\n)\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model.PokemonDescription.habitat","title":"habitat  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>habitat: str = Field(\n    description=\"The natural habitat where the Pokemon can typically be found, phrased as a noun.\",\n    max_length=15,\n)\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model.PokemonDescription.height","title":"height  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>height: float = Field(\n    description=\"The height of the Pokemon in meters.\"\n)\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model.PokemonDescription.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = Field(\n    description=\"The creative name for the Pokemon. Avoid using real names or actual Pokemon names.\"\n)\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model.PokemonDescription.types","title":"types  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>types: set[PokemonType] = Field(\n    description=\"The type(s) of the Pokemon.\",\n    max_length=2,\n    min_length=1,\n)\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model.PokemonDescription.weight","title":"weight  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>weight: float = Field(\n    description=\"The weight of the Pokemon in kilograms.\"\n)\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model.PokemonType","title":"PokemonType","text":"<p>               Bases: <code>StrEnum</code></p> <p>An enumeration of Pokemon types.</p>"},{"location":"code/backend/#calm_calatheas.model.PokemonType.BUG","title":"BUG  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BUG = auto()\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model.PokemonType.DARK","title":"DARK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DARK = auto()\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model.PokemonType.DRAGON","title":"DRAGON  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DRAGON = auto()\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model.PokemonType.ELECTRIC","title":"ELECTRIC  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ELECTRIC = auto()\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model.PokemonType.FAIRY","title":"FAIRY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FAIRY = auto()\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model.PokemonType.FIGHTING","title":"FIGHTING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FIGHTING = auto()\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model.PokemonType.FIRE","title":"FIRE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FIRE = auto()\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model.PokemonType.FLYING","title":"FLYING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FLYING = auto()\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model.PokemonType.GHOST","title":"GHOST  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>GHOST = auto()\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model.PokemonType.GRASS","title":"GRASS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>GRASS = auto()\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model.PokemonType.GROUND","title":"GROUND  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>GROUND = auto()\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model.PokemonType.ICE","title":"ICE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ICE = auto()\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model.PokemonType.NORMAL","title":"NORMAL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>NORMAL = auto()\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model.PokemonType.POISON","title":"POISON  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>POISON = auto()\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model.PokemonType.PSYCHIC","title":"PSYCHIC  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PSYCHIC = auto()\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model.PokemonType.ROCK","title":"ROCK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ROCK = auto()\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model.PokemonType.STEEL","title":"STEEL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>STEEL = auto()\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model.PokemonType.WATER","title":"WATER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>WATER = auto()\n</code></pre>"},{"location":"code/backend/#calm_calatheas.model.generate_description","title":"generate_description  <code>cached</code>","text":"<pre><code>generate_description(\n    user_prompt: str,\n) -&gt; PokemonDescription\n</code></pre> <p>Generate a Pokemon description based on the user's prompt.</p>"},{"location":"code/backend/#calm_calatheas.settings","title":"calm_calatheas.settings","text":""},{"location":"code/backend/#calm_calatheas.settings.settings","title":"settings  <code>module-attribute</code>","text":"<pre><code>settings = Settings()\n</code></pre>"},{"location":"code/backend/#calm_calatheas.settings.Settings","title":"Settings","text":"<p>               Bases: <code>BaseSettings</code></p> <p>Settings for the application.</p>"},{"location":"code/backend/#calm_calatheas.settings.Settings.host","title":"host  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>host: str = Field(\n    default=\"localhost\",\n    description=\"Host to bind the server to\",\n)\n</code></pre>"},{"location":"code/backend/#calm_calatheas.settings.Settings.log_level","title":"log_level  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>log_level: str = Field(\n    default=\"DEBUG\",\n    description=\"Logging level for the application\",\n)\n</code></pre>"},{"location":"code/backend/#calm_calatheas.settings.Settings.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = SettingsConfigDict(extra='ignore')\n</code></pre>"},{"location":"code/backend/#calm_calatheas.settings.Settings.port","title":"port  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>port: int = Field(\n    default=8000, description=\"Port to bind the server to\"\n)\n</code></pre>"},{"location":"code/backend/#calm_calatheas.settings.Settings.static_files_path","title":"static_files_path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>static_files_path: str = Field(\n    default=\"app\",\n    description=\"Path to the static files directory\",\n)\n</code></pre>"},{"location":"code/frontend/","title":"Frontend","text":"<p>Below is a high-level overview of the frontend architecture:</p> <p></p> <p>This diagram was generated automatically using <code>pydeps</code>.</p> <p>Diagram completeness</p> <p>To keep the diagram clear, relationships between components, services, and their base classes are not shown.</p> <p>The following sections provide detailed documentation, generated automatically with <code>mkdocstrings</code>.</p>"},{"location":"code/frontend/#app.frontend","title":"app.frontend","text":""},{"location":"code/frontend/#app.frontend.__all__","title":"__all__  <code>module-attribute</code>","text":"<pre><code>__all__ = ['App']\n</code></pre>"},{"location":"code/frontend/#app.frontend.App","title":"App","text":"<p>               Bases: <code>Component</code></p> <p>The main application class.</p>"},{"location":"code/frontend/#app.frontend.App.build","title":"build","text":"<pre><code>build() -&gt; str\n</code></pre>"},{"location":"code/frontend/#app.frontend.App.on_render","title":"on_render","text":"<pre><code>on_render() -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.App.pre_destroy","title":"pre_destroy","text":"<pre><code>pre_destroy() -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.base","title":"app.frontend.base","text":""},{"location":"code/frontend/#app.frontend.base.__all__","title":"__all__  <code>module-attribute</code>","text":"<pre><code>__all__ = ['Component', 'Service']\n</code></pre>"},{"location":"code/frontend/#app.frontend.base.Component","title":"Component","text":"<p>               Bases: <code>ABC</code></p> <p>A base class for all components.</p>"},{"location":"code/frontend/#app.frontend.base.Component.destroyed","title":"destroyed  <code>instance-attribute</code>","text":"<pre><code>destroyed = Subject[None]()\n</code></pre>"},{"location":"code/frontend/#app.frontend.base.Component.element","title":"element  <code>instance-attribute</code>","text":"<pre><code>element: JsDomElement | None = None\n</code></pre>"},{"location":"code/frontend/#app.frontend.base.Component.guid","title":"guid  <code>instance-attribute</code>","text":"<pre><code>guid = uuid4()\n</code></pre>"},{"location":"code/frontend/#app.frontend.base.Component.parser","title":"parser  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parser = new()\n</code></pre>"},{"location":"code/frontend/#app.frontend.base.Component.root","title":"root  <code>instance-attribute</code>","text":"<pre><code>root = root\n</code></pre>"},{"location":"code/frontend/#app.frontend.base.Component.__init__","title":"__init__","text":"<pre><code>__init__(root: JsDomElement) -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.base.Component.build","title":"build  <code>abstractmethod</code>","text":"<pre><code>build() -&gt; str\n</code></pre> <p>Build the component's template and output it as an HTML string.</p>"},{"location":"code/frontend/#app.frontend.base.Component.destroy","title":"destroy","text":"<pre><code>destroy() -&gt; None\n</code></pre> <p>Destroy the component and clean up resources.</p>"},{"location":"code/frontend/#app.frontend.base.Component.on_destroy","title":"on_destroy","text":"<pre><code>on_destroy() -&gt; None\n</code></pre> <p>Hook to perform actions after the component is destroyed.</p>"},{"location":"code/frontend/#app.frontend.base.Component.on_render","title":"on_render","text":"<pre><code>on_render() -&gt; None\n</code></pre> <p>Hook to perform actions after rendering the component.</p>"},{"location":"code/frontend/#app.frontend.base.Component.pre_destroy","title":"pre_destroy","text":"<pre><code>pre_destroy() -&gt; None\n</code></pre> <p>Hook to perform actions before the component is destroyed.</p>"},{"location":"code/frontend/#app.frontend.base.Component.pre_render","title":"pre_render","text":"<pre><code>pre_render() -&gt; None\n</code></pre> <p>Hook to perform actions before rendering the component.</p>"},{"location":"code/frontend/#app.frontend.base.Component.remove","title":"remove","text":"<pre><code>remove() -&gt; None\n</code></pre> <p>Remove the component's element from the DOM.</p>"},{"location":"code/frontend/#app.frontend.base.Component.render","title":"render","text":"<pre><code>render() -&gt; None\n</code></pre> <p>Create a new DOM element for the component and append it to the root element.</p>"},{"location":"code/frontend/#app.frontend.base.Service","title":"Service","text":"<p>Base class for all services.</p>"},{"location":"code/frontend/#app.frontend.base.Service.destroyed","title":"destroyed  <code>instance-attribute</code>","text":"<pre><code>destroyed = Subject[None]()\n</code></pre>"},{"location":"code/frontend/#app.frontend.base.Service.__init__","title":"__init__","text":"<pre><code>__init__() -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.base.Service.destroy","title":"destroy","text":"<pre><code>destroy() -&gt; None\n</code></pre> <p>Destroy the service.</p>"},{"location":"code/frontend/#app.frontend.base.Service.on_destroy","title":"on_destroy","text":"<pre><code>on_destroy() -&gt; None\n</code></pre> <p>Hook to perform actions after the service is destroyed.</p>"},{"location":"code/frontend/#app.frontend.components","title":"app.frontend.components","text":""},{"location":"code/frontend/#app.frontend.components.__all__","title":"__all__  <code>module-attribute</code>","text":"<pre><code>__all__ = [\n    \"Description\",\n    \"DescriptionDropdown\",\n    \"Footer\",\n    \"Header\",\n    \"LoadingCaptionModel\",\n    \"Pokemon\",\n    \"Theme\",\n]\n</code></pre>"},{"location":"code/frontend/#app.frontend.components.Description","title":"Description","text":"<p>               Bases: <code>Component</code></p> <p>Test component to demonstrate the descriptions service.</p>"},{"location":"code/frontend/#app.frontend.components.Description.__init__","title":"__init__","text":"<pre><code>__init__(\n    root: JsDomElement, description: PokemonRecord | None\n) -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.components.Description.build","title":"build","text":"<pre><code>build() -&gt; str\n</code></pre>"},{"location":"code/frontend/#app.frontend.components.Description.on_render","title":"on_render","text":"<pre><code>on_render() -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.components.Description.pre_destroy","title":"pre_destroy","text":"<pre><code>pre_destroy() -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.components.DescriptionDropdown","title":"DescriptionDropdown","text":"<p>               Bases: <code>Component</code></p> <p>Dropdown for Pokemon descriptions.</p>"},{"location":"code/frontend/#app.frontend.components.DescriptionDropdown.__init__","title":"__init__","text":"<pre><code>__init__(\n    root: JsDomElement, description: PokemonRecord\n) -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.components.DescriptionDropdown.build","title":"build","text":"<pre><code>build() -&gt; str\n</code></pre>"},{"location":"code/frontend/#app.frontend.components.DescriptionDropdown.on_render","title":"on_render","text":"<pre><code>on_render() -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.components.Footer","title":"Footer","text":"<p>               Bases: <code>Component</code></p> <p>Footer for the application.</p>"},{"location":"code/frontend/#app.frontend.components.Footer.__init__","title":"__init__","text":"<pre><code>__init__(root: JsDomElement) -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.components.Footer.build","title":"build","text":"<pre><code>build() -&gt; str\n</code></pre>"},{"location":"code/frontend/#app.frontend.components.Footer.on_render","title":"on_render","text":"<pre><code>on_render() -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.components.Footer.pre_destroy","title":"pre_destroy","text":"<pre><code>pre_destroy() -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.components.Header","title":"Header","text":"<p>               Bases: <code>Component</code></p> <p>The main header for the application.</p>"},{"location":"code/frontend/#app.frontend.components.Header.expanded","title":"expanded  <code>property</code> <code>writable</code>","text":"<pre><code>expanded: bool\n</code></pre> <p>Whether or not the navbar menu is expanded.</p>"},{"location":"code/frontend/#app.frontend.components.Header.__init__","title":"__init__","text":"<pre><code>__init__(root: JsDomElement) -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.components.Header.build","title":"build","text":"<pre><code>build() -&gt; str\n</code></pre>"},{"location":"code/frontend/#app.frontend.components.Header.on_render","title":"on_render","text":"<pre><code>on_render() -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.components.Header.pre_destroy","title":"pre_destroy","text":"<pre><code>pre_destroy() -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.components.LoadingCaptionModel","title":"LoadingCaptionModel","text":"<p>               Bases: <code>Component</code></p> <p>A component that shows a loading indicator while the caption model is being loaded.</p>"},{"location":"code/frontend/#app.frontend.components.LoadingCaptionModel.__init__","title":"__init__","text":"<pre><code>__init__(root: JsDomElement) -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.components.LoadingCaptionModel.build","title":"build","text":"<pre><code>build() -&gt; str\n</code></pre>"},{"location":"code/frontend/#app.frontend.components.Pokemon","title":"Pokemon","text":"<p>               Bases: <code>Component</code></p> <p>The list of Pokemon.</p>"},{"location":"code/frontend/#app.frontend.components.Pokemon.__init__","title":"__init__","text":"<pre><code>__init__(root: JsDomElement) -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.components.Pokemon.build","title":"build","text":"<pre><code>build() -&gt; str\n</code></pre>"},{"location":"code/frontend/#app.frontend.components.Pokemon.on_render","title":"on_render","text":"<pre><code>on_render() -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.components.Theme","title":"Theme","text":"<p>               Bases: <code>Component</code></p> <p>A component for selecting the theme.</p>"},{"location":"code/frontend/#app.frontend.components.Theme.build","title":"build","text":"<pre><code>build() -&gt; str\n</code></pre>"},{"location":"code/frontend/#app.frontend.components.Theme.on_destroy","title":"on_destroy","text":"<pre><code>on_destroy() -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.components.Theme.on_render","title":"on_render","text":"<pre><code>on_render() -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.models","title":"app.frontend.models","text":""},{"location":"code/frontend/#app.frontend.models.__all__","title":"__all__  <code>module-attribute</code>","text":"<pre><code>__all__ = [\n    \"PokemonDescription\",\n    \"PokemonRecord\",\n    \"PokemonType\",\n]\n</code></pre>"},{"location":"code/frontend/#app.frontend.models.PokemonDescription","title":"PokemonDescription","text":"<p>               Bases: <code>BaseModel</code></p> <p>A description of a Pokemon, as generated by the API.</p>"},{"location":"code/frontend/#app.frontend.models.PokemonDescription.ability","title":"ability  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ability: str = Field()\n</code></pre>"},{"location":"code/frontend/#app.frontend.models.PokemonDescription.category","title":"category  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>category: str = Field()\n</code></pre>"},{"location":"code/frontend/#app.frontend.models.PokemonDescription.flavor_text","title":"flavor_text  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>flavor_text: str = Field()\n</code></pre>"},{"location":"code/frontend/#app.frontend.models.PokemonDescription.habitat","title":"habitat  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>habitat: str = Field()\n</code></pre>"},{"location":"code/frontend/#app.frontend.models.PokemonDescription.height","title":"height  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>height: float = Field()\n</code></pre>"},{"location":"code/frontend/#app.frontend.models.PokemonDescription.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = Field()\n</code></pre>"},{"location":"code/frontend/#app.frontend.models.PokemonDescription.types","title":"types  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>types: set[PokemonType] = Field()\n</code></pre>"},{"location":"code/frontend/#app.frontend.models.PokemonDescription.weight","title":"weight  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>weight: float = Field()\n</code></pre>"},{"location":"code/frontend/#app.frontend.models.PokemonRecord","title":"PokemonRecord","text":"<p>               Bases: <code>PokemonDescription</code></p> <p>A description of a Pokemon with an image and timestamp, as stored in the database.</p>"},{"location":"code/frontend/#app.frontend.models.PokemonRecord.favourite","title":"favourite  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>favourite: bool = Field(default=False)\n</code></pre>"},{"location":"code/frontend/#app.frontend.models.PokemonRecord.img_url","title":"img_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>img_url: str = Field()\n</code></pre>"},{"location":"code/frontend/#app.frontend.models.PokemonRecord.timestamp","title":"timestamp  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>timestamp: datetime = Field(\n    default_factory=lambda: now(UTC)\n)\n</code></pre>"},{"location":"code/frontend/#app.frontend.models.PokemonType","title":"PokemonType","text":"<p>               Bases: <code>StrEnum</code></p> <p>An enumeration of Pokemon types.</p>"},{"location":"code/frontend/#app.frontend.models.PokemonType.BUG","title":"BUG  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BUG = auto()\n</code></pre>"},{"location":"code/frontend/#app.frontend.models.PokemonType.DARK","title":"DARK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DARK = auto()\n</code></pre>"},{"location":"code/frontend/#app.frontend.models.PokemonType.DRAGON","title":"DRAGON  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DRAGON = auto()\n</code></pre>"},{"location":"code/frontend/#app.frontend.models.PokemonType.ELECTRIC","title":"ELECTRIC  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ELECTRIC = auto()\n</code></pre>"},{"location":"code/frontend/#app.frontend.models.PokemonType.FAIRY","title":"FAIRY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FAIRY = auto()\n</code></pre>"},{"location":"code/frontend/#app.frontend.models.PokemonType.FIGHTING","title":"FIGHTING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FIGHTING = auto()\n</code></pre>"},{"location":"code/frontend/#app.frontend.models.PokemonType.FIRE","title":"FIRE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FIRE = auto()\n</code></pre>"},{"location":"code/frontend/#app.frontend.models.PokemonType.FLYING","title":"FLYING  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FLYING = auto()\n</code></pre>"},{"location":"code/frontend/#app.frontend.models.PokemonType.GHOST","title":"GHOST  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>GHOST = auto()\n</code></pre>"},{"location":"code/frontend/#app.frontend.models.PokemonType.GRASS","title":"GRASS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>GRASS = auto()\n</code></pre>"},{"location":"code/frontend/#app.frontend.models.PokemonType.GROUND","title":"GROUND  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>GROUND = auto()\n</code></pre>"},{"location":"code/frontend/#app.frontend.models.PokemonType.ICE","title":"ICE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ICE = auto()\n</code></pre>"},{"location":"code/frontend/#app.frontend.models.PokemonType.NORMAL","title":"NORMAL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>NORMAL = auto()\n</code></pre>"},{"location":"code/frontend/#app.frontend.models.PokemonType.POISON","title":"POISON  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>POISON = auto()\n</code></pre>"},{"location":"code/frontend/#app.frontend.models.PokemonType.PSYCHIC","title":"PSYCHIC  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PSYCHIC = auto()\n</code></pre>"},{"location":"code/frontend/#app.frontend.models.PokemonType.ROCK","title":"ROCK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ROCK = auto()\n</code></pre>"},{"location":"code/frontend/#app.frontend.models.PokemonType.STEEL","title":"STEEL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>STEEL = auto()\n</code></pre>"},{"location":"code/frontend/#app.frontend.models.PokemonType.WATER","title":"WATER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>WATER = auto()\n</code></pre>"},{"location":"code/frontend/#app.frontend.services","title":"app.frontend.services","text":""},{"location":"code/frontend/#app.frontend.services.__all__","title":"__all__  <code>module-attribute</code>","text":"<pre><code>__all__ = [\n    \"Camera\",\n    \"Caption\",\n    \"Database\",\n    \"Description\",\n    \"Pokemon\",\n    \"Reader\",\n    \"Theme\",\n    \"Theme_\",\n    \"caption\",\n    \"database\",\n    \"description\",\n    \"pokemon\",\n    \"reader\",\n    \"theme\",\n]\n</code></pre>"},{"location":"code/frontend/#app.frontend.services.Camera","title":"Camera","text":"<p>               Bases: <code>Service</code></p> <p>A service for accessing the user's camera.</p>"},{"location":"code/frontend/#app.frontend.services.Camera.is_acquiring_media_stream","title":"is_acquiring_media_stream  <code>instance-attribute</code>","text":"<pre><code>is_acquiring_media_stream = BehaviorSubject[bool](\n    value=False\n)\n</code></pre>"},{"location":"code/frontend/#app.frontend.services.Camera.media_stream","title":"media_stream  <code>instance-attribute</code>","text":"<pre><code>media_stream = BehaviorSubject[Optional[MediaStream]](\n    value=None\n)\n</code></pre>"},{"location":"code/frontend/#app.frontend.services.Camera.__init__","title":"__init__","text":"<pre><code>__init__() -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.services.Camera.acquire_media_stream","title":"acquire_media_stream","text":"<pre><code>acquire_media_stream() -&gt; None\n</code></pre> <p>Trigger the process of acquiring the media stream.</p>"},{"location":"code/frontend/#app.frontend.services.Camera.dispose_media_stream","title":"dispose_media_stream","text":"<pre><code>dispose_media_stream() -&gt; None\n</code></pre> <p>Stop all tracks in the media stream and notify subscribers.</p>"},{"location":"code/frontend/#app.frontend.services.Camera.on_destroy","title":"on_destroy","text":"<pre><code>on_destroy() -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.services.Camera.toggle_facing_mode","title":"toggle_facing_mode","text":"<pre><code>toggle_facing_mode() -&gt; None\n</code></pre> <p>Switch the preferred facing mode between user and environment.</p>"},{"location":"code/frontend/#app.frontend.services.Caption","title":"Caption","text":"<p>               Bases: <code>Service</code></p> <p>Service to generate captions for images.</p>"},{"location":"code/frontend/#app.frontend.services.Caption.captions","title":"captions  <code>instance-attribute</code>","text":"<pre><code>captions = ReplaySubject[str]()\n</code></pre>"},{"location":"code/frontend/#app.frontend.services.Caption.is_generating_caption","title":"is_generating_caption  <code>instance-attribute</code>","text":"<pre><code>is_generating_caption = BehaviorSubject[bool](value=False)\n</code></pre>"},{"location":"code/frontend/#app.frontend.services.Caption.is_loading_model","title":"is_loading_model  <code>instance-attribute</code>","text":"<pre><code>is_loading_model = BehaviorSubject[bool](value=False)\n</code></pre>"},{"location":"code/frontend/#app.frontend.services.Caption.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model = ReplaySubject[Model]()\n</code></pre>"},{"location":"code/frontend/#app.frontend.services.Caption.__init__","title":"__init__","text":"<pre><code>__init__() -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.services.Caption.on_destroy","title":"on_destroy","text":"<pre><code>on_destroy() -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.services.Database","title":"Database","text":"<p>               Bases: <code>Service</code></p> <p>Service for interacting with IndexedDB.</p>"},{"location":"code/frontend/#app.frontend.services.Database.__init__","title":"__init__","text":"<pre><code>__init__() -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.services.Database.delete","title":"delete  <code>async</code>","text":"<pre><code>delete(name: str) -&gt; None\n</code></pre> <p>Delete a Pokemon.</p>"},{"location":"code/frontend/#app.frontend.services.Database.find_all","title":"find_all  <code>async</code>","text":"<pre><code>find_all() -&gt; list[PokemonRecord]\n</code></pre> <p>Find all Pokemon.</p>"},{"location":"code/frontend/#app.frontend.services.Database.find_one","title":"find_one  <code>async</code>","text":"<pre><code>find_one(name: str) -&gt; PokemonRecord | None\n</code></pre> <p>Find a single Pokemon.</p>"},{"location":"code/frontend/#app.frontend.services.Database.on_destroy","title":"on_destroy","text":"<pre><code>on_destroy() -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.services.Database.put","title":"put  <code>async</code>","text":"<pre><code>put(description: PokemonRecord) -&gt; None\n</code></pre> <p>Store a Pokemon.</p>"},{"location":"code/frontend/#app.frontend.services.Description","title":"Description","text":"<p>               Bases: <code>Service</code></p> <p>Service to generate descriptions from captions.</p>"},{"location":"code/frontend/#app.frontend.services.Description.descriptions","title":"descriptions  <code>instance-attribute</code>","text":"<pre><code>descriptions = ReplaySubject[PokemonDescription]()\n</code></pre>"},{"location":"code/frontend/#app.frontend.services.Description.is_generating_description","title":"is_generating_description  <code>instance-attribute</code>","text":"<pre><code>is_generating_description = BehaviorSubject[bool](\n    value=False\n)\n</code></pre>"},{"location":"code/frontend/#app.frontend.services.Description.__init__","title":"__init__","text":"<pre><code>__init__() -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.services.Pokemon","title":"Pokemon","text":"<p>               Bases: <code>Service</code></p> <p>Service that maintains a list of the user's current Pokemon.</p>"},{"location":"code/frontend/#app.frontend.services.Pokemon.is_generating","title":"is_generating  <code>instance-attribute</code>","text":"<pre><code>is_generating = BehaviorSubject[bool](value=False)\n</code></pre>"},{"location":"code/frontend/#app.frontend.services.Pokemon.is_refreshing","title":"is_refreshing  <code>instance-attribute</code>","text":"<pre><code>is_refreshing = BehaviorSubject[bool](value=False)\n</code></pre>"},{"location":"code/frontend/#app.frontend.services.Pokemon.pokemon","title":"pokemon  <code>instance-attribute</code>","text":"<pre><code>pokemon = BehaviorSubject[list[PokemonRecord]](value=[])\n</code></pre>"},{"location":"code/frontend/#app.frontend.services.Pokemon.__init__","title":"__init__","text":"<pre><code>__init__() -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.services.Pokemon.delete","title":"delete","text":"<pre><code>delete(name: str) -&gt; None\n</code></pre> <p>Delete the pokemon with the given name.</p>"},{"location":"code/frontend/#app.frontend.services.Pokemon.on_destroy","title":"on_destroy","text":"<pre><code>on_destroy() -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.services.Pokemon.put","title":"put","text":"<pre><code>put(pokemon: PokemonRecord) -&gt; None\n</code></pre> <p>Update the database with the given pokemon.</p>"},{"location":"code/frontend/#app.frontend.services.Pokemon.refresh","title":"refresh","text":"<pre><code>refresh() -&gt; None\n</code></pre> <p>Trigger a refresh of the list.</p>"},{"location":"code/frontend/#app.frontend.services.Reader","title":"Reader","text":"<p>               Bases: <code>Service</code></p> <p>Service for reading files and generating object URLs.</p>"},{"location":"code/frontend/#app.frontend.services.Reader.is_reading","title":"is_reading  <code>instance-attribute</code>","text":"<pre><code>is_reading = BehaviorSubject[bool](value=False)\n</code></pre>"},{"location":"code/frontend/#app.frontend.services.Reader.object_urls","title":"object_urls  <code>instance-attribute</code>","text":"<pre><code>object_urls = ReplaySubject[str]()\n</code></pre>"},{"location":"code/frontend/#app.frontend.services.Reader.__init__","title":"__init__","text":"<pre><code>__init__() -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.services.Reader.on_destroy","title":"on_destroy","text":"<pre><code>on_destroy() -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.services.Reader.read","title":"read","text":"<pre><code>read(object_: Readable) -&gt; None\n</code></pre> <p>Upload an object and trigger further processing.</p>"},{"location":"code/frontend/#app.frontend.services.Theme","title":"Theme","text":"<p>               Bases: <code>Service</code></p> <p>Service to manage the theme of the application.</p>"},{"location":"code/frontend/#app.frontend.services.Theme.current","title":"current  <code>instance-attribute</code>","text":"<pre><code>current = BehaviorSubject[Theme_](\n    cast(\"Theme_\", theme)\n    if (theme := (getItem(LOCAL_STORAGE_KEY)))\n    and theme in {\"light\", \"dark\"}\n    else None\n)\n</code></pre>"},{"location":"code/frontend/#app.frontend.services.Theme.__init__","title":"__init__","text":"<pre><code>__init__() -&gt; None\n</code></pre>"},{"location":"code/frontend/#app.frontend.services.Theme.on_destroy","title":"on_destroy","text":"<pre><code>on_destroy() -&gt; None\n</code></pre> <p>Clean up the theme service.</p>"},{"location":"contributor-guide/","title":"Contributor Guide","text":"<p>This guide provides information on how to contribute to the project, including setting up your development environment, using version control, and contributing to the documentation.</p> <p>It is intended for project members as well as the code jam judges.</p>"},{"location":"contributor-guide/development-environment/","title":"Development Environment","text":"<p>Follow the steps below to set up your development environment.</p>"},{"location":"contributor-guide/development-environment/#configure-your-ssh-key","title":"Configure your SSH Key","text":"<p>Follow the steps below to configure your SSH key for accessing the repository:</p> <ol> <li>Generate an SSH key.</li> <li>Add the SSH key to your GitHub account.</li> </ol>"},{"location":"contributor-guide/development-environment/#clone-the-repository","title":"Clone the Repository","text":"<p>To clone the repository, run the following command:</p> <pre><code>git clone git@github.com:cj12-calm-calatheas/code-jam-12.git\n</code></pre> <p>This will clone the repository to your local machine using SSH.</p>"},{"location":"contributor-guide/development-environment/#environment-setup","title":"Environment Setup","text":"<p>To get started with the project, you can either install the devcontainer or follow the manual setup instructions below.</p>"},{"location":"contributor-guide/development-environment/#using-the-devcontainer","title":"Using the Devcontainer","text":"<p>This project includes a devcontainer to automatically set up your development environment, including the all tools and dependencies required for local development.</p> Prerequisites <p>Please ensure you have the following prerequisites installed:</p> <ul> <li> <p>Docker must be installed on your system to use the devcontainer.</p> </li> <li> <p>The Remote Development Extension Pack for Visual Studio Code must be installed to work with devcontainers.</p> </li> </ul> Use WSL on Windows <p>If you are using Windows, we strongly recommend cloning the repository into the WSL filesystem instead of the Windows filesystem. This significantly improves I/O performance when running the devcontainer.</p>"},{"location":"contributor-guide/development-environment/#configure-your-ssh-agent","title":"Configure your SSH Agent","text":"<p>The devcontainer will attempt to pick up your SSH key from your <code>ssh-agent</code> when it starts. Follow the guide on sharing git credentials with the devcontainer to ensure your SSH key is available inside the container.</p>"},{"location":"contributor-guide/development-environment/#open-the-repository","title":"Open the Repository","text":"<p>To get started, navigate to the folder where you cloned the repository and run:</p> <pre><code>code .\n</code></pre> <p>This will open the current directory in Visual Studio Code.</p>"},{"location":"contributor-guide/development-environment/#build-the-environment","title":"Build the Environment","text":"<p>Once Visual Studio Code is open, you will see a notification at the bottom right corner of the window asking if you want to open the project in a devcontainer. Select <code>Reopen in Container</code>.</p> <p>Your development environment will now be set up automatically.</p> What if I don't see the notification? <p>You can manually open the devcontainer by pressing <code>F1</code> to open the command pallette. Type <code>&gt;Dev Containers: Reopen in Container</code> and press <code>Enter</code> to select the command.</p> Detailed Setup Guides <p>For more details, refer to the setup guide for your IDE:</p> <ul> <li>Visual Studio Code</li> <li>PyCharm</li> </ul>"},{"location":"contributor-guide/development-environment/#manual-setup","title":"Manual Setup","text":"<p>Alternatively, you can set up the development environment manually by following the steps below.</p> Prerequisites <p>Please ensure you have the following prerequisites installed:</p> <ul> <li>Python 3.13 must be installed on your system.</li> <li>Node.js must be installed on your system for linting non-Python files.</li> </ul> <p>You can check your Python version with:</p> <pre><code>python --version\n</code></pre>"},{"location":"contributor-guide/development-environment/#open-the-repository_1","title":"Open the Repository","text":"<p>Start by opening the repository in your terminal or command prompt.</p> <pre><code>cd path/to/your/repository\n</code></pre>"},{"location":"contributor-guide/development-environment/#set-up-your-python-environment","title":"Set up your Python Environment","text":"<p>This project uses uv for dependency management. If you don't have <code>uv</code> installed, you can install it using pip:</p> <pre><code>python -m pip install uv\n</code></pre> <p>To install the dependencies, run:</p> <pre><code>uv venv --allow-existing &amp;&amp; uv sync\n</code></pre> <p>This sets up a virtual environment and installs all required packages.</p>"},{"location":"contributor-guide/development-environment/#install-nodejs-dependencies","title":"Install Node.js Dependencies","text":"<p>For linting non-Python files, we also require some Node.js dependencies. To install them, run:</p> <pre><code>npm install\n</code></pre>"},{"location":"contributor-guide/development-environment/#set-up-pre-commit-hooks","title":"Set up Pre-commit Hooks","text":"<p>To ensure code quality, this project uses pre-commit hooks. Install them by running:</p> <pre><code>uv run pre-commit install\n</code></pre> <p>This will set up the pre-commit hooks to run automatically on each commit.</p>"},{"location":"contributor-guide/development-environment/#install-playwright","title":"Install Playwright","text":"<p>This project uses Playwright to simulate user interactions for testing. To install the required dependencies, run the following command:</p> <pre><code>uv run playwright install --with-deps\n</code></pre>"},{"location":"contributor-guide/documentation/","title":"Documentation","text":"<p>This page provides guidelines for contributing to the documentation.</p>"},{"location":"contributor-guide/documentation/#tools","title":"Tools","text":"<p>The documentation is built using MkDocs, a static site generator that converts Markdown files into a website.</p> <p>Markdown is a lightweight markup language with plain-text formatting syntax. Refer to the Markdown Guide for more information on how to use Markdown.</p> <p>This project uses the Material for MkDocs theme to generate the documentation. Please review the theme documentation for guidance on how to use its various features.</p>"},{"location":"contributor-guide/documentation/#running-the-documentation","title":"Running the Documentation","text":"<p>Prerequisites</p> <p>Ensure you have set up your development environment before running the documentation.</p> <p>To view the documentation locally, you can use the following command:</p> <pre><code>uv run mkdocs serve\n</code></pre> <p>Open your browser and navigate to <code>http://localhost:8000</code> to view the documentation. The changes you make to the documentation will be automatically reflected in the browser.</p>"},{"location":"contributor-guide/documentation/#adding-a-new-page","title":"Adding a New Page","text":"<p>To add a new page to the documentation, create a new Markdown file in the <code>docs</code> directory.</p> <p>Next, update the <code>nav</code> section in the <code>mkdocs.yaml</code> file to include the new page. The <code>nav</code> section defines the structure of the documentation and the order in which the pages are displayed in the navigation bar.</p> <p>Please ensure that the folder structure in the <code>docs</code> directory matches the structure defined in the <code>nav</code> section.</p>"},{"location":"contributor-guide/documentation/#linting","title":"Linting","text":"<p>This project is configured to use markdownlint to ensure consistent Markdown styling and formatting across the documentation. The linter is automatically run when you commit changes to the repository.</p> <p>You can configure the linter rules in the <code>.markdownlint.json</code> file. Refer to the markdownlint rules for more information on the available rules.</p> <p>Use a Markdown Linter Extension</p> <p>We recommend installing a Markdown linter extension in your editor to help identify and fix issues as you write. The devcontainer is pre-configured with the <code>markdownlint</code> extension for Visual Studio Code.</p>"},{"location":"contributor-guide/documentation/#formatting","title":"Formatting","text":"<p>The documentation is formatted using Prettier, an opinionated code formatter that ensures consistent style across the project. Prettier is automatically run when you save a Markdown file in the editor.</p> <p>You can configure the formatting rules in the <code>.prettierrc.json</code> file. Refer to the Prettier options for more information on the available options.</p>"},{"location":"contributor-guide/documentation/#publishing-the-documentation","title":"Publishing the Documentation","text":"<p>The documentation is published automatically when changes are merged into the <code>main</code> branch. A GitHub Action workflow is triggered to build the documentation and push it to the <code>gh-pages</code> branch. The published documentation is hosted on GitHub Pages.</p>"},{"location":"contributor-guide/version-control/","title":"Version Control","text":"<p>Follow the steps below when contributing to the project. These steps ensure that all changes are properly tracked and reviewed.</p>"},{"location":"contributor-guide/version-control/#create-a-new-branch","title":"Create a New Branch","text":"<p>Always create a new branch for your changes. This makes it easier to handle multiple contributions simultaneously.</p> Why should I create a new branch? <p>Creating a new branch allows you to work on your changes without affecting the <code>main</code> branch. This makes it easier to collaborate with others and keep the codebase clean.</p> <p>First, pull the latest changes from the <code>main</code> branch:</p> <pre><code>git pull main\n</code></pre> <p>Next, create a new branch with the following command:</p> <pre><code>git checkout -b \"&lt;YOUR_BRANCH_NAME&gt;\"\n</code></pre> <p>Replace <code>&lt;YOUR_BRANCH_NAME&gt;</code> with a short, descriptive name for your branch. For example, <code>add-uptime-command</code>.</p>"},{"location":"contributor-guide/version-control/#commit-your-changes","title":"Commit your Changes","text":"<p>On your local branch, you can make changes to the code such as adding new features, fixing bugs, or updating documentation. Once you have made your changes, you can commit them to your branch.</p> <pre><code>git add .\ngit commit -m \"feat: add uptime command\"\n</code></pre> <p>Make sure to write a clear and concise commit message that describes the changes you have made.</p> How often should I commit my changes? <p>It's a good practice to commit your changes often. This allows you to track your progress and revert changes if needed.</p>"},{"location":"contributor-guide/version-control/#automated-checks","title":"Automated Checks","text":"<p>The project includes pre-commit hooks to ensure your code meets the quality standards. These hooks run automatically before each commit.</p> What if the pre-commit hooks fail? <p>If the pre-commit hooks fail, you will need to address the issues before committing your changes. Follow the instructions provided by the pre-commit hooks to identify and fix the issues.</p> How do I run the pre-commit hooks manually? <p>Pre-commit hooks can also be run manually using the following command:</p> <pre><code>uv run pre-commit\n</code></pre> <p>The pre-commit hooks are intended to help us keep the codebase maintainable. If there are rules that you believe are too strict, please discuss them with the team.</p>"},{"location":"contributor-guide/version-control/#create-a-pull-request","title":"Create a Pull Request","text":"<p>Once you have completed your changes, it's time to create a pull request. A pull request allows your changes to be reviewed and merged into the <code>main</code> branch.</p> <p>Before creating a pull request, ensure your branch is up to date with the latest changes from the <code>main</code> branch:</p> <pre><code>git pull main\n</code></pre> <p>Next, push your changes to the repository:</p> <pre><code>git push\n</code></pre> <p>Finally, create a pull request on GitHub. Select your branch as the source and the <code>main</code> branch as the base.</p> <p>Give your pull request a descriptive title that summarizes the changes you have made. In the pull request description, provide a brief overview of the changes and any relevant information for reviewers.</p> Pull Request Description <p>Here's an example of a good pull request description:</p> <pre><code># feat: add uptime command\n\nThis pull request adds a new uptime command to display the bot's uptime.\n\n## Changes\n\n- Added a new command to display the bot's uptime\n- Updated the help command to include information about the new command\n\n## Notes\n\n- The new command is implemented in a separate file for better organization\n- The command has been tested locally and works as expected\n</code></pre>"},{"location":"contributor-guide/version-control/#automated-checks_1","title":"Automated Checks","text":"<p>The same pre-commit hooks that run locally will also run automatically on the pull request. The workflow also runs the tests to ensure everything is working correctly, and checks the docs for any broken links.</p> What if the checks fail on the pull request? <p>If the checks fail on the pull request, you will need to address the issues in your branch and push the changes. The checks will run again automatically.</p> <p>Please address any issues identified by the checks before requesting a review.</p>"},{"location":"contributor-guide/version-control/#ask-for-a-review","title":"Ask for a Review","text":"<p>All pull requests should be reviewed by at least one other team member before merging. The reviewer will provide feedback and suggestions for improvement.</p> <p>Once the reviewer approves the pull request, you can merge it into the <code>main</code> branch.</p> How do I request a review? <p>Request a review from a team member by assigning them as a reviewer to your pull request.</p>"},{"location":"contributor-guide/version-control/#giving-feedback","title":"Giving Feedback","text":"<p>When providing feedback on a pull request, be constructive and specific. Point out areas for improvement and suggest possible solutions. If you have any questions or concerns, don't hesitate to ask the author for clarification.</p> <p>A code review should focus on the following aspects:</p> <ul> <li>Correctness and functionality</li> <li>Code quality and readability</li> <li>Adherence to the project guidelines</li> </ul> Good Code Review Feedback <p>Here are some examples of good code review feedback:</p> <pre><code>- Great work on the new command! The implementation looks good overall.\n- I noticed a small typo in the docstring. Could you update it to fix the typo?\n- The logic in the new command is a bit complex. Consider breaking it down into smaller functions for clarity.\n- The tests cover most of the functionality, but we are missing a test case for edge case X. Could you add a test for that?\n</code></pre> <p>Always be respectful and considerate when giving feedback. Remember that the goal is to improve the code and help the author grow as a developer.</p> <p>Be Positive</p> <p>Don't forget to acknowledge the positive aspects of the contribution as well!</p>"},{"location":"contributor-guide/version-control/#merge-the-pull-request","title":"Merge the Pull Request","text":"<p>Once the pull request has been approved and all checks have passed, you can merge it into the <code>main</code> branch. To merge the pull request, click the \"Merge\" button on the pull request page. After merging, your branch will be automatically deleted.</p>"},{"location":"design/","title":"Design","text":"<p>This section describes the design of the Pokedexter application. It is intended for developers, the code jam judges, and anyone interested in understanding the architecture, components, and design decisions behind the system.</p>"},{"location":"design/backend/","title":"Backend","text":"<p>The Pokedexter backend is primarily responsible for serving the machine learning model for generating descriptions and serving the static files for the frontend application.</p>"},{"location":"design/backend/#web-server","title":"Web Server","text":"<p>The web server is built with Starlette, a lightweight ASGI framework for Python web applications. Starlette offers essential features for handling HTTP requests, routing, and middleware, making it a straightforward choice for our backend. While we considered FastAPI, we ultimately selected Starlette for its simplicity and minimalism.</p> <p>The server serves static frontend files and exposes two main endpoints:</p> <ul> <li>Description Generation: An endpoint that uses the machine learning model to generate Pok\u00e9mon descriptions.</li> <li>Healthcheck: An endpoint for monitoring the server\u2019s status. Used by the Docker container to ensure the service   is running.</li> </ul> <p>This setup keeps the backend focused and efficient, aligning with our design goals.</p>"},{"location":"design/backend/#description-generation","title":"Description Generation","text":"<p>The backend hosts a machine learning model that generates Pok\u00e9mon descriptions. This model is accessed through the Description Generation endpoint, allowing the frontend to request descriptions based on captions created in the browser.</p> <p>We use the <code>Qwen/Qwen3-1.7B</code> model, a general-purpose text generator. After testing various prompts and settings, we found that this model produces high-quality Pok\u00e9mon descriptions from image captions. However, the model is quite large. While it can run on a laptop or desktop for limited use, it does not scale well to many users and user experience will degrade under heavy load.</p> <p>For best results, we recommend running the model on a machine that has a GPU with CUDA support (the oldest version we tested was CUDA 6.5 on an NVIDIA GeForce GTX 1080ti) and 16GB of RAM. In our experience, generating a description typically takes less than a minute.</p> <p>We would have preferred to use a more lightweight model that could run directly in the browser. However, the lightweight models we tested did not generate high-quality Pok\u00e9mon descriptions. One possible solution would be to fine-tune or train a smaller model specifically for this task, but this would have required more time and a dataset of high-quality Pok\u00e9mon descriptions, which were beyond our resources for the code jam.</p>"},{"location":"design/backend/#reverse-proxy","title":"Reverse Proxy","text":"<p>We recommend deploying Pokedexter behind a reverse proxy acting as a TLS termination proxy. Both the camera and PWA features require a secure browser context, which is only available when the app is served over HTTPS.</p> <p>Secure browser context required</p> <p>The camera and PWA features will not work outside of a secure browser context!</p> <p>A reverse proxy is not included in our stack, as most users will already have their own solution or use a managed reverse proxy provided by their cloud platform. The deployment guide includes instructions for setting up a TLS termination proxy with Caddy.</p> <p>If you do not have a valid TLS certificate, the app can only be used on <code>localhost</code>, since browsers treat it as a secure context.</p>"},{"location":"design/backend/#docker","title":"Docker","text":"<p>Pokedexter can be easily deployed using Docker. We provide a <code>Dockerfile</code> that sets up the necessary environment and dependencies for running the application. The Docker image includes the web server, the machine learning model, and all static files needed for the frontend. We do not publish the Docker image to a public registry, so users will need to build it locally.</p>"},{"location":"design/design-goals/","title":"Design Goals","text":"<p>Our primary design goals for the code jam project were:</p> <ul> <li>Browser-first: The application should run entirely in the browser, using technologies like PyScript and Pyodide and   leveraging the browser APIs where possible.</li> <li>Python-centric: The project should be developed mainly in Python, minimizing reliance on other languages.</li> <li>Modern web architecture: The app\u2019s structure should follow typical web application patterns, allowing us to assess   Python\u2019s suitability for building modern web apps.</li> <li>Mobile-friendly: The application should provide a seamless experience on mobile devices, similar to an authentic Pok\u00e9dex.</li> </ul> <p>As the project progressed, we aimed to add offline capability as a key feature. However, this goal was only partially achieved, as some components ultimately did not run in the browser.</p>"},{"location":"design/system-overview/","title":"System Overview","text":"<p>The diagram below illustrates the architecture of the Pokedexter system:</p> <p></p> <p>Most of the system runs in the browser, using technologies such as PyScript and Pyodide, and makes extensive use of browser APIs. Features like object recognition and the database, which are often implemented as backend services, are handled in-browser where possible.</p> <p>The backend is intentionally minimal to align with our design goals and the code jam theme. It mainly serves static frontend assets and processes tasks that cannot be handled in the browser due to resource constraints.</p>"},{"location":"design/web-app/","title":"Web App","text":"<p>The web app is the core of the system, responsible for the user experience, interface, and interactions. Built with PyScript and Pyodide, it runs Python code directly in the browser. The app includes a presentation layer and modules for camera access, image processing, and database management.</p>"},{"location":"design/web-app/#presentation-layer","title":"Presentation Layer","text":"<p>The presentation layer manages the user interface and interactions. It is structured as a Single Page Application (SPA) and follows a Model-View-Presenter (MVP) architecture, which separates UI components from business logic and state management. This design keeps the application architecture similar to modern web frameworks like React or Angular, aligning with our key design goals.</p> <p></p>"},{"location":"design/web-app/#components","title":"Components","text":"<p>Views are organized as individual components, each responsible for a specific part of the user interface. They are all grouped in the <code>components</code> module and inherit from a base <code>Component</code> class that implements rendering logic and lifecycle methods.</p> <p>The lifecycle of a component includes initialization, rendering, and destruction. This lifecycle is typically managed by a parent component that coordinates these phases.</p> <pre><code>graph TB\n    subgraph Component Lifecycle\n        direction LR\n        A[Initialization] --&gt; B[Rendering]\n        B --&gt; C[Destruction]\n    end</code></pre> <p>Initialization: The component is created but not yet displayed. This phase sets up the component\u2019s internal state and prepares it for rendering.</p> <p>Rendering: The component generates its HTML and inserts it into the DOM at its designated root element. Most components also attach event listeners at this stage to handle user interactions and state changes.</p> <p>Destruction: The component is removed from the DOM and any resources it used are released. This includes detaching event listeners and cleaning up internal state.</p> <p>Lifecycle hooks enable components to run custom logic before and after each phase of their lifecycle. These hooks provide flexibility for setup, teardown, and responding to changes during initialization, rendering, and destruction.</p> <p>Components define their HTML structure using text-based templates, which are processed by a simple, custom-built templating engine. This engine is intentionally minimal and does not support advanced features such as conditionals or loops, unlike the templating systems in frameworks like React or Angular. Looking ahead, the upcoming template strings feature in Python 3.14 is expected to improve Python\u2019s native HTML templating capabilities, as supporting this use case is specifically mentioned in the PEP.</p>"},{"location":"design/web-app/#services","title":"Services","text":"<p>Services are responsible for providing business logic and state management for the application. They encapsulate the core functionality and can be reused across different components. Most services exist globally and can be accessed by any component that needs them, although they can also be owned by specific components if needed.</p> <p>All services are organized into the <code>services</code> module and inherit from the <code>Service</code> base class, which provides lifecycle management for all services.</p> <p>A service\u2019s lifecycle consists of two main phases: initialization and destruction. Global services are managed centrally, while services owned by specific components are managed by those components.</p> <pre><code>graph TB\n    subgraph Service Lifecycle\n        direction LR\n        A[Initialization] --&gt; B[Destruction]\n    end</code></pre> <p>Initialization: The service is instantiated and its internal state is set up. This may include fetching initial data or configuring dependencies.</p> <p>Destruction: The service is cleaned up when it is no longer needed. This involves releasing resources such as event listeners, database sessions, or network connections.</p> <p>Lifecycle hooks allow services to execute custom logic before and after each phase, providing flexibility for setup, teardown, and responding to changes during initialization and destruction.</p>"},{"location":"design/web-app/#state-management","title":"State Management","text":"<p>State is managed by services, which implement the observer pattern. This allows components to subscribe to state changes and react as needed, decoupling state management from the presentation layer and ensuring a clean separation of concerns.</p> <p>Unlike frameworks such as React or Angular, which provide built-in concepts like signals and effects, PyScript does not offer these features natively. Instead, we use the reactivex library to manage asynchronous data streams and events, enabling reactive programming patterns within the application.</p>"},{"location":"design/web-app/#camera","title":"Camera","text":"<p>The camera service manages access to the user's camera and handles image capture and permissions.</p> <p>Integrating camera functionality directly into the application ensures a seamless experience for users as they explore and search for Pok\u00e9mon, without needing to switch to a separate camera app. This approach also accommodates devices that may not have a dedicated camera application.</p> <p>For users without a camera, or for those who wish to analyze existing images, the application also provides an image upload feature. This allows users to select and process images from their device, ensuring accessibility and flexibility for all users.</p>"},{"location":"design/web-app/#object-recognition","title":"Object Recognition","text":"<p>The object recognition service identifies and classifies objects within images, then generates captions describing them. These captions are passed to the description generation model, which creates Pok\u00e9mon-themed descriptions based on the recognized objects.</p> <p>The object recognition service uses the <code>Xenova/vit-gpt2-image-captioning</code> model, an image-to-text machine learning model. This lightweight model runs well even on devices with limited computing power, such as smartphones. While it provides reasonable results for image captioning tasks, our experimentation shows that its accuracy may vary depending on the input.</p> <p>We originally planned to use the <code>transformers</code> library for Python to run the model. Unfortunately, some of its dependencies are incompatible with Pyodide because they cannot be compiled to WebAssembly.</p> <p>We considered two options: moving the object recognition service to the backend to keep it in Python, or running the model in the browser using <code>transformers.js</code> and accessing it from Python via Pyodide. To keep with the spirit of the code jam, we chose to run the model entirely in the browser using <code>transformers.js</code>.</p> <p>While we would have preferred to leverage Python\u2019s rich machine learning ecosystem for this feature, current limitations prevent us from doing so. Enabling advanced machine learning capabilities directly in the browser would make Python a much stronger choice for web development and help it move beyond experimental or hobby projects.</p> <p>There is a noticeable slowdown during model initialization and occasionally when processing images. To address this, we tried running the model in a separate web worker to offload processing from the main thread. However, we encountered errors loading the model in the worker and were unable to resolve them within our timeframe. With more time, we believe this issue could be solved, but we chose to focus on other features.</p>"},{"location":"design/web-app/#database","title":"Database","text":"<p>The database is responsible for storing each user's Pok\u00e9mon collection.</p> <p>We use IndexedDB as our database solution because it is a widely supported web standard that offers a robust, asynchronous API for managing large amounts of structured data directly in the browser.</p> <p>Storing each user's collection in a client-side database means the data is kept locally in their browser. This approach has some limitations: collections cannot be shared across devices or with other users, and all data will be lost if the user clears their browser storage. We accept these trade-offs because using a browser-based database fits the code jam theme and our design goals. For a future version, we would consider synchronizing the database with a remote server to enable cross-device access and backups.</p>"},{"location":"design/web-app/#progressive-web-app","title":"Progressive Web App","text":"<p>Pokedexter is a Progressive Web App (PWA), meaning it can be installed on a user's device and run like a native app. When installed, it operates in standalone mode, providing easier access and a familiar user experience.</p> <p>While some PWAs offer offline capabilities, Pokedexter currently relies on the backend for description generation and requires an internet connection. A key improvement could be to explore or train a model that can run entirely on-device, enabling a fully offline experience. This would enhance the fantasy of carrying a real Pok\u00e9dex with you outdoors or in nature.</p>"},{"location":"design/web-app/#browser-support","title":"Browser Support","text":"<p>Pokedexter is tested and works reliably on all major modern browsers, including Chromium-based browsers (such as Chrome and Edge), WebKit-based browsers (Safari), and Firefox. To ensure consistent behavior across environments, we use Playwright together with Pytest and Testcontainers for automated cross-browser testing in a production-like environment.</p> <p>You can find the test scenarios in the <code>tests</code> folder.</p>"},{"location":"design/web-app/#css-framework","title":"CSS Framework","text":"<p>We chose Bulma as our CSS framework because it is a modern, responsive framework that makes it easy to create visually appealing and responsive layouts. The choice for a CSS framework rather than writing custom styles from scratch saved us some time to focus on the functionality of the app.</p>"}]}