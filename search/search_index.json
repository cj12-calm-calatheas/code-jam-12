{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Calm Calatheas \ud83e\udeb4","text":"<p>Welcome to the documentation for the Calm Calatheas project!</p>"},{"location":"#what-is-this-project","title":"What is this project?","text":"<p>This project is our entry for the Python Discord Code Jam 12.</p>"},{"location":"#about-the-team","title":"About the team","text":"<p>This project has been built by the Calm Calatheas team. Please feel free to reach out if you have any questions, or need a hand with anything!</p> <p> </p>"},{"location":"architecture/","title":"Architecture","text":""},{"location":"contributor-guide/","title":"Contributor Guide","text":"<p>This guide provides information on how to contribute to the project, including setting up your development environment, using version control, and contributing to the documentation.</p> <p>It is intended for project members as well as the code jam judges.</p>"},{"location":"contributor-guide/development-environment/","title":"Development Environment","text":"<p>Follow the steps below to set up your development environment.</p>"},{"location":"contributor-guide/development-environment/#configure-your-ssh-key","title":"Configure your SSH Key","text":"<p>Follow the steps below to configure your SSH key for accessing the repository:</p> <ol> <li>Generate an SSH key.</li> <li>Add the SSH key to your GitHub account.</li> </ol>"},{"location":"contributor-guide/development-environment/#clone-the-repository","title":"Clone the Repository","text":"<p>To clone the repository, run the following command:</p> <pre><code>git clone git@github.com:cj12-calm-calatheas/code-jam-12.git\n</code></pre> <p>This will clone the repository to your local machine using SSH.</p>"},{"location":"contributor-guide/development-environment/#environment-setup","title":"Environment Setup","text":"<p>To get started with the project, you can either install the devcontainer or follow the manual setup instructions below.</p>"},{"location":"contributor-guide/development-environment/#using-the-devcontainer","title":"Using the Devcontainer","text":"<p>This project includes a devcontainer to automatically set up your development environment, including the all tools and dependencies required for local development.</p> Prerequisites <p>Please ensure you have the following prerequisites installed:</p> <ul> <li> <p>Docker must be installed on your system to use the devcontainer.</p> </li> <li> <p>The Remote Development Extension Pack for Visual Studio Code must be installed to work with devcontainers.</p> </li> </ul> Use WSL on Windows <p>If you are using Windows, we strongly recommend cloning the repository into the WSL filesystem instead of the Windows filesystem. This significantly improves I/O performance when running the devcontainer.</p>"},{"location":"contributor-guide/development-environment/#configure-your-ssh-agent","title":"Configure your SSH Agent","text":"<p>The devcontainer will attempt to pick up your SSH key from your <code>ssh-agent</code> when it starts. Follow the guide on sharing git credentials with the devcontainer to ensure your SSH key is available inside the container.</p>"},{"location":"contributor-guide/development-environment/#open-the-repository","title":"Open the Repository","text":"<p>To get started, navigate to the folder where you cloned the repository and run:</p> <pre><code>code .\n</code></pre> <p>This will open the current directory in Visual Studio Code.</p>"},{"location":"contributor-guide/development-environment/#build-the-environment","title":"Build the Environment","text":"<p>Once Visual Studio Code is open, you will see a notification at the bottom right corner of the window asking if you want to open the project in a devcontainer. Select <code>Reopen in Container</code>.</p> <p>Your development environment will now be set up automatically.</p> What if I don't see the notification? <p>You can manually open the devcontainer by pressing <code>F1</code> to open the command pallette. Type <code>&gt;Dev Containers: Reopen in Container</code> and press <code>Enter</code> to select the command.</p> Detailed Setup Guides <p>For more details, refer to the setup guide for your IDE:</p> <ul> <li>Visual Studio Code</li> <li>PyCharm</li> </ul>"},{"location":"contributor-guide/development-environment/#manual-setup","title":"Manual Setup","text":"<p>Alternatively, you can set up the development environment manually by following the steps below.</p> Prerequisites <p>Please ensure you have the following prerequisites installed:</p> <ul> <li>Python 3.13 must be installed on your system.</li> <li>Node.js must be installed on your system for linting non-Python files.</li> </ul> <p>You can check your Python version with:</p> <pre><code>python --version\n</code></pre>"},{"location":"contributor-guide/development-environment/#open-the-repository_1","title":"Open the Repository","text":"<p>Start by opening the repository in your terminal or command prompt.</p> <pre><code>cd path/to/your/repository\n</code></pre>"},{"location":"contributor-guide/development-environment/#set-up-your-python-environment","title":"Set up your Python Environment","text":"<p>This project uses uv for dependency management. If you don't have <code>uv</code> installed, you can install it using pip:</p> <pre><code>python -m pip install uv\n</code></pre> <p>To install the dependencies, run:</p> <pre><code>uv venv --allow-existing &amp;&amp; uv sync\n</code></pre> <p>This sets up a virtual environment and installs all required packages.</p>"},{"location":"contributor-guide/development-environment/#install-nodejs-dependencies","title":"Install Node.js Dependencies","text":"<p>For linting non-Python files, we also require some Node.js dependencies. To install them, run:</p> <pre><code>npm install\n</code></pre>"},{"location":"contributor-guide/development-environment/#set-up-pre-commit-hooks","title":"Set up Pre-commit Hooks","text":"<p>To ensure code quality, this project uses pre-commit hooks. Install them by running:</p> <pre><code>uv run pre-commit install\n</code></pre> <p>This will set up the pre-commit hooks to run automatically on each commit.</p>"},{"location":"contributor-guide/development-environment/#install-playwright","title":"Install Playwright","text":"<p>This project uses Playwright to simulate user interactions for testing. To install the required dependencies, run the following command:</p> <pre><code>uv run playwright install --with-deps\n</code></pre>"},{"location":"contributor-guide/documentation/","title":"Documentation","text":"<p>This page provides guidelines for contributing to the documentation.</p>"},{"location":"contributor-guide/documentation/#tools","title":"Tools","text":"<p>The documentation is built using MkDocs, a static site generator that converts Markdown files into a website.</p> <p>Markdown is a lightweight markup language with plain-text formatting syntax. Refer to the Markdown Guide for more information on how to use Markdown.</p> <p>This project uses the Material for MkDocs theme to generate the documentation. Please review the theme documentation for guidance on how to use its various features.</p>"},{"location":"contributor-guide/documentation/#running-the-documentation","title":"Running the Documentation","text":"<p>Prerequisites</p> <p>Ensure you have set up your development environment before running the documentation.</p> <p>To view the documentation locally, you can use the following command:</p> <pre><code>uv run mkdocs serve\n</code></pre> <p>Open your browser and navigate to <code>http://localhost:8000</code> to view the documentation. The changes you make to the documentation will be automatically reflected in the browser.</p>"},{"location":"contributor-guide/documentation/#adding-a-new-page","title":"Adding a New Page","text":"<p>To add a new page to the documentation, create a new Markdown file in the <code>docs</code> directory.</p> <p>Next, update the <code>nav</code> section in the <code>mkdocs.yaml</code> file to include the new page. The <code>nav</code> section defines the structure of the documentation and the order in which the pages are displayed in the navigation bar.</p> <p>Please ensure that the folder structure in the <code>docs</code> directory matches the structure defined in the <code>nav</code> section.</p>"},{"location":"contributor-guide/documentation/#linting","title":"Linting","text":"<p>This project is configured to use markdownlint to ensure consistent Markdown styling and formatting across the documentation. The linter is automatically run when you commit changes to the repository.</p> <p>You can configure the linter rules in the <code>.markdownlint.json</code> file. Refer to the markdownlint rules for more information on the available rules.</p> <p>Use a Markdown Linter Extension</p> <p>We recommend installing a Markdown linter extension in your editor to help identify and fix issues as you write. The devcontainer is pre-configured with the <code>markdownlint</code> extension for Visual Studio Code.</p>"},{"location":"contributor-guide/documentation/#formatting","title":"Formatting","text":"<p>The documentation is formatted using Prettier, an opinionated code formatter that ensures consistent style across the project. Prettier is automatically run when you save a Markdown file in the editor.</p> <p>You can configure the formatting rules in the <code>.prettierrc.json</code> file. Refer to the Prettier options for more information on the available options.</p>"},{"location":"contributor-guide/documentation/#publishing-the-documentation","title":"Publishing the Documentation","text":"<p>The documentation is published automatically when changes are merged into the <code>main</code> branch. A GitHub Action workflow is triggered to build the documentation and push it to the <code>gh-pages</code> branch. The published documentation is hosted on GitHub Pages.</p>"},{"location":"contributor-guide/version-control/","title":"Version Control","text":"<p>Follow the steps below when contributing to the project. These steps ensure that all changes are properly tracked and reviewed.</p>"},{"location":"contributor-guide/version-control/#create-a-new-branch","title":"Create a New Branch","text":"<p>Always create a new branch for your changes. This makes it easier to handle multiple contributions simultaneously.</p> Why should I create a new branch? <p>Creating a new branch allows you to work on your changes without affecting the <code>main</code> branch. This makes it easier to collaborate with others and keep the codebase clean.</p> <p>First, pull the latest changes from the <code>main</code> branch:</p> <pre><code>git pull main\n</code></pre> <p>Next, create a new branch with the following command:</p> <pre><code>git checkout -b \"&lt;YOUR_BRANCH_NAME&gt;\"\n</code></pre> <p>Replace <code>&lt;YOUR_BRANCH_NAME&gt;</code> with a short, descriptive name for your branch. For example, <code>add-uptime-command</code>.</p>"},{"location":"contributor-guide/version-control/#commit-your-changes","title":"Commit your Changes","text":"<p>On your local branch, you can make changes to the code such as adding new features, fixing bugs, or updating documentation. Once you have made your changes, you can commit them to your branch.</p> <pre><code>git add .\ngit commit -m \"feat: add uptime command\"\n</code></pre> <p>Make sure to write a clear and concise commit message that describes the changes you have made.</p> How often should I commit my changes? <p>It's a good practice to commit your changes often. This allows you to track your progress and revert changes if needed.</p>"},{"location":"contributor-guide/version-control/#automated-checks","title":"Automated Checks","text":"<p>The project includes pre-commit hooks to ensure your code meets the quality standards. These hooks run automatically before each commit.</p> What if the pre-commit hooks fail? <p>If the pre-commit hooks fail, you will need to address the issues before committing your changes. Follow the instructions provided by the pre-commit hooks to identify and fix the issues.</p> How do I run the pre-commit hooks manually? <p>Pre-commit hooks can also be run manually using the following command:</p> <pre><code>uv run pre-commit\n</code></pre> <p>The pre-commit hooks are intended to help us keep the codebase maintainable. If there are rules that you believe are too strict, please discuss them with the team.</p>"},{"location":"contributor-guide/version-control/#create-a-pull-request","title":"Create a Pull Request","text":"<p>Once you have completed your changes, it's time to create a pull request. A pull request allows your changes to be reviewed and merged into the <code>main</code> branch.</p> <p>Before creating a pull request, ensure your branch is up to date with the latest changes from the <code>main</code> branch:</p> <pre><code>git pull main\n</code></pre> <p>Next, push your changes to the repository:</p> <pre><code>git push\n</code></pre> <p>Finally, create a pull request on GitHub. Select your branch as the source and the <code>main</code> branch as the base.</p> <p>Give your pull request a descriptive title that summarizes the changes you have made. In the pull request description, provide a brief overview of the changes and any relevant information for reviewers.</p> Pull Request Description <p>Here's an example of a good pull request description:</p> <pre><code># feat: add uptime command\n\nThis pull request adds a new uptime command to display the bot's uptime.\n\n## Changes\n\n- Added a new command to display the bot's uptime\n- Updated the help command to include information about the new command\n\n## Notes\n\n- The new command is implemented in a separate file for better organization\n- The command has been tested locally and works as expected\n</code></pre>"},{"location":"contributor-guide/version-control/#automated-checks_1","title":"Automated Checks","text":"<p>The same pre-commit hooks that run locally will also run automatically on the pull request. The workflow also runs the tests to ensure everything is working correctly, and checks the docs for any broken links.</p> What if the checks fail on the pull request? <p>If the checks fail on the pull request, you will need to address the issues in your branch and push the changes. The checks will run again automatically.</p> <p>Please address any issues identified by the checks before requesting a review.</p>"},{"location":"contributor-guide/version-control/#ask-for-a-review","title":"Ask for a Review","text":"<p>All pull requests should be reviewed by at least one other team member before merging. The reviewer will provide feedback and suggestions for improvement.</p> <p>Once the reviewer approves the pull request, you can merge it into the <code>main</code> branch.</p> How do I request a review? <p>Request a review from a team member by assigning them as a reviewer to your pull request.</p>"},{"location":"contributor-guide/version-control/#giving-feedback","title":"Giving Feedback","text":"<p>When providing feedback on a pull request, be constructive and specific. Point out areas for improvement and suggest possible solutions. If you have any questions or concerns, don't hesitate to ask the author for clarification.</p> <p>A code review should focus on the following aspects:</p> <ul> <li>Correctness and functionality</li> <li>Code quality and readability</li> <li>Adherence to the project guidelines</li> </ul> Good Code Review Feedback <p>Here are some examples of good code review feedback:</p> <pre><code>- Great work on the new command! The implementation looks good overall.\n- I noticed a small typo in the docstring. Could you update it to fix the typo?\n- The logic in the new command is a bit complex. Consider breaking it down into smaller functions for clarity.\n- The tests cover most of the functionality, but we are missing a test case for edge case X. Could you add a test for that?\n</code></pre> <p>Always be respectful and considerate when giving feedback. Remember that the goal is to improve the code and help the author grow as a developer.</p> <p>Be Positive</p> <p>Don't forget to acknowledge the positive aspects of the contribution as well!</p>"},{"location":"contributor-guide/version-control/#merge-the-pull-request","title":"Merge the Pull Request","text":"<p>Once the pull request has been approved and all checks have passed, you can merge it into the <code>main</code> branch. To merge the pull request, click the \"Merge\" button on the pull request page. After merging, your branch will be automatically deleted.</p>"},{"location":"user-guide/","title":"User Guide","text":""}]}